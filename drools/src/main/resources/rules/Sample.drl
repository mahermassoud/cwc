package com.sample
 
import java.util.ArrayList;
import java.util.List;
import com.sample.GeneListInputAgent;

/**
* Determines if a input list of Genes is relevant to another gene set. Uses threshold of .7 matching. Prints out each match
*
* @param input Input list that is being checked for relevance
* @param desired List that is being checked against for relevance
* @param ruleName name of rule that we are in, for output purposes
* @return boolean whether input is relevant or not
*/
function boolean inputIsRelevant(GeneListInputAgent input, List desired) {
	ArrayList<String> gene_set = input.getArray();
	
	System.out.println("Comparing input " + input.getFileName() + "...");
	// Count number of matches
	int match_count = 0;
	for(String gene : gene_set) {
		if(desired.contains(gene)) {
			match_count++;
			System.out.println(gene + " is a match!");
		} 	
	}

	// Check match proportion
	double matchProportion = (double)match_count / (double)desired.size();
	System.out.println(input.getFileName() + " has " + matchProportion + " match proportion\n");
	if(matchProportion >= .70) {
		return true;
	}
	else {
		return false;
	}
}
 
rule "genes_epidermal_growth_factor_receptor"
	when
		geneInput : GeneListInputAgent()
		eval( inputIsRelevant(geneInput, GeneListInputAgent.GENE_EPIDERMAL_GROWTH_FACTOR_RECEPTOR) )
	then
		System.out.println("Input " + geneInput.getFileName() + " is relevant to epidermal growth factor receptor!");
end


rule "genes_myocyte_enhancer_2c"
	when
		geneInput : GeneListInputAgent()
		eval( inputIsRelevant(geneInput, GeneListInputAgent.GENE_MYOCYTE_ENHANCER_2C) )
	then
		System.out.println("Input " + geneInput.getFileName() + " is relevant to myocyte enhancer 2c");
end


rule "genes_calmodulin_1"
	when
		geneInput : GeneListInputAgent()
		eval( inputIsRelevant(geneInput, GeneListInputAgent.GENE_CALMODULIN_1) )
	then
		System.out.println("!!!!!! Input " + geneInput.getFileName() + " is relevant to calmodulin 1 !!!!!!");
end
